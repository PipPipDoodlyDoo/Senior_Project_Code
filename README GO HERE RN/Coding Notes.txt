Trivial Notes:
PRINT
	print("string ", variable)					# Didn't need the +str() function
	
Functions:
	for a while loop or for loop there are no {} to define the scope of the function
	instead they use indentation.
	
	Example:
		for x in range (21):					# They use Semicolon to start the for loop.
			i = x+i						
			
Formatting
	for ADC when displaying the Analog Voltage & want to show only 2 decimal on print
	use print('{:.2f}'.format(variable))
___________________________________________________________________________
For a basic GPIO

Pin Notes (https://docs.micropython.org/en/latest/library/machine.Pin.html):
    Can be used as input or output
		output_p#_name = Pin(#,Pin.OUT)			# Set GPIO Output
		output_p#_name = Pin(#,Pin.IN)			# Set GPIO Input
	

	There is a Pull_UP or Pull_DOWN Resistor Functionality
		P#_name = Pin(#, Pin.IN, Pin.PULL_UP)	# Set GPIO Input to Pull Up
		P#_name = Pin(#, Pin.IN, Pin.PULL_DOWN)	# Set GPIO Input to Pull Down
	
	Set the !OUTPUT! GPIO High or LOW
		output_p#_name.value(1)					# Set Output Pin High
		output_p#_name.value(0)					# Set Output Pin Low
		
	You can reconfigure the pin
		reference the document
	
	The LED is on pin 25
	
Code:
from machine import Pin             			# Importing the python library

LED = Pin(25, Pin.OUT)							# Initializing the Pin directionality and number to variable LED
LED.value(1)									# Set the led pin high
LED.value(0)									# Set the LED pin Low
__________________________________________________________________________________________

Analog-to-Digital Converter

Notes:
	There are 3 channels for external ADC use:
		[0, 1, 2]
	The 4th channel is used for internal temperature
	
	The correlating pins for ADC are:
		[26, 27, 28]
	
		import machine
	
	FOR THIS YOU JUST USE:
		adc.read_u16()							# This should give a 16 bit digital voltage

Code:
	from machine import ADC, Pin				# Including the library to the project
	ADC = ADC(Pin(26))							# Initializing Pin 26 to do ADC
	ADC.read_u16()								# Read the ADC pin
	
More Notes:
	For more control use ADCBlock (Don't know if Pycharm supports this in its package
		
Code:
	from machine import ADCBlock

	block = ADCBlock(id, bits=12)  				# create an ADCBlock with 12-bit resolution
	adc = block.connect(4, pin)    				# connect channel 4 to the given pin
	val = adc.read_uv()            				# read an analog value

Notes for Coding:
	I think the formula from converting the digital value back to analog is:
		Analog = Reference_Voltage / (2^N - 1) * Digital_Value
		
	The reference voltage for Raspberry Pi Pico is 3.3V
	N is 16 because of "read_U16" meaning 16-bits therefore N is 65536
	The denominator is total 65535
	Digital value is ADC Reading
	
___________________________________________________________________________
Threading

Description: 
	This is running multiple instructions of code simultaneously. Within the circuit digest documentation of
	"multicore" processing, it says that there is one thread per core for the RP2040.
	
	(https://circuitdigest.com/microcontroller-projects/dual-core-programming-on-raspberry-pi-pico-using-micropython)
	
Notes:
	Library to access "multicore" or threading is "_thread" so the code to import would look like
		import _thread
	https://mpython.readthedocs.io/en/master/library/micropython/_thread.html						# URL to view the library package content
	
	I think the second thread (Core 1) would just be running the ADC intakes and writing to the memory via pointer
		
Code:
	_thread.start_new_thread(function,arg())
___________________________________________________________________________
How to use functions and global:
Notes:
	On the main script they are Global functions. But if you want to change variables value
	you would have to use the global command.
	
code:
	import math
	x = 1							# Arbitrary value
	
	def change value
		x = 2						# This will change the value of x within the function
									# as soon as function is over it changes back to 1
		global x 					# For Pycharm you have to define the Global variable then write to it
		
		x = 3						# this changes x value internally and externally of the function
		
___________________________________________________________________________
Switch Case
Notes:
	It says that for Python 3.10+ we can use match argument
	
Code:
	def number_to_string(argument):
		match argument:
			case 0:
				return "zero"
			case 1:
				return "one"
			case 2:
				return "two
	
	if _name_ = "_main_"
		argument = 0
		number_to_string(argument)
___________________________________________________________________________
Dictionaries
Notes:
    Just like in C/C++ you would use #define to macro everything
    In Python there is no code to implement that but there are dictionaries
    that you can use.

Code:
    thisdict = {
        "brand": "Ford",
        "model": "Mustang",
        "year": 1964
    }

    # to access that value we do

    thisdict["brand"]
___________________________________________________________________________
Lists
    This can be utilized with organizing the old data and comparing it to the new
    Mostly during the calibration stage we will check if the 2 values are increasing or decreasing
    This will tell us what end of the slope we are on.

___________________________________________________________________________
for loops
Notes:
    The syntax for this
Code:
    thislist = ["apple", "banana", "cherry"]

    for x in thislist:
        print(x)

___________________________________________________________________________
Logic Operators
Notes:
    you can run multiple checks on an If Statement by using 'and'/'or'

Code:
    if ((case 1) and (case 2)):     # Pretty sure you can extend out later on and cascade test
    if ((x > 3) or (y < 2)):

___________________________________________________________________________
Interrupt
Notes:
    This will be dedicated to only pin because that is what we are working with
    The different triggers for Pin
        -Pin.IRQ_FALLING
        -Pin.IRQ_RISING
        -Pin.IRQ_LOW_LEVEL
        -Pin.IRQ_HIGH_LEVEL
        (These values can be OR'ed together to have multiple triggers)

___________________________________________________________________________

AD8302 Notes:
	As for the AD8302, the Phase Difference graph shows a parabolic function. This is un-advantageous
		because at 0 degrees we do now know whether this is positive or negative phase shift
	If we can craft the hardware components to have a default of 90 phase shift then we can use that slope.
		Ideally it should cover the 90 degree phase shift
	
Code Notes:
	For this project we will be using the phase at difference originally set at 90 degrees which is looking 12 o'clock
    This will cover the whole sweep of direction which that we are just looking right in front of us.


___________________________________________________________________________
Testing Notes:
    - As for the ADC, when converting the digital to analog value for the voltage, Channel 0 (pin 26) is 20 mV higher. May need to take that
        to consideration depending on the sensitivity when it comes to the direction to heading.

___________________________________________________________________________
Implementation Notes
Phase Array:
    On the website; https://www.radartutorial.eu/06.antennas/Phased%20Array%20Antenna.en.html
    they talked about phase array and their equation came to:
        phi = 360 * d * sin(theta) / lambda
            phi     ~ Phase Shift between 2 successive elements (phase difference between antenna)
            d       ~ Distance between the antenna [meters]
            theta   ~ beam direction
            lambda  ~ wavelength which is 1.811 meters

            *All calculation are calculations are done in degree

    Now the equation to get Beam Direction from Phase shift is:
        theta = asin((phi * lambda) / (360 * d))
Theory:
    If my thinking is right then the beam direction (theta) should come from straight on.
    Therefore, the 12 o'clock direction should be 0 degree which means that this is
Hardware:
    As we sample the output AD8302 in Volts, we go from Digital Volts -> Analog Voltage -> Degrees
    As for the heading:
     9 o'clock: 180 to 165      6
    10 o'clock: 165 to 135      5
    11 o'clock: 135 to 105      4
    12 o'clock: 105 to  75      3
     1 o'clock:  75 to  45      2
     2 o'clock:  45 to  15      1
     3 o'clock:  15 to   0      0

___________________________________________________________________________
Notes to do:
    -[] Later whether we use an LCD or a UART Terminal, all the print would change to
        Serial writes. "writing to the user"
    -[] During the Calibration values we have initial zero, and we can find the degree offset from 2 successive elements and
        then with the Magnitude output ratio we can find
    -[] We will compare the difference of phase offset between the measured and calibrated value.
    -[] May have to incorporate another ADC for the reference Output of AD8302
    -[] With finding whether the direction is left or right with using magnitude difference. If positive then INPA is higher than INPB
        In a scenario, left antenna is INPA then this would mean the collar is in the left-hand plane.
    -[] Need to worry about if I hit the maximum output of phase pin which is in-phase input.

___________________________________________________________________________
For the Evaluation board, The top pins from left to right are:
    1: Ground
    2: Vpp
    3: Ground

There are also rings that are Ground and Vpp

TYPICAL RATING:
    Power Supply: 5V
    Input Voltage: -73      to -13 dBm
                    140 uV  to  140 mV
Test 1:
	This test was conducted within the SPL using:
		RIGOL DG1022	Function Generator
		RIGOL DP832		Programmable DC Power Supply
		RIGOL DM3058E 	Digital Multimeter
		RG316 Wires (1 meter)
		BNC-to-SMA Adapters
		AD8302

	Function Generator Parameters:
		For both OUTPUTS
			Freq:			20 MHz
			Ampl:			14 mVpp -> -33 dBm
			Offset:			N/A
		Phase (Output 1):	0 degree
		Phase (Output 2):	varied from 0-to-360 degrees

    Equations:
        Converting the Voltage to phase offset [Volts-to-Degree]
        y = 94.476x - 177.44
        y = -94.786x + 177.15

___________________________________________________________________________
Version 3 Changes:
- ph_mes and mag_mes are now list to store consecutive readings. [3 is the limit so far]
- moved the ph_voltage-to-phase to the phase offset source file
- from the 2 initial measured
- use the data sheet max min output as the initial max and min. check always if this change
    -STANDARD DEV OF MAX AND MIN = 5 mV
- Check if we hit max or min using Modular?
    - passing in the adc pins, max & min voltages, and current phase voltage
- Phase offset measurement needs to take account of the ROLLOVER

THINGS TO DO
-[] Compare the analog voltages instead of phase offset after measurements
-[] Maybe use a separate interrupt button to change which slope is being used. The other following calculation will follow
-[] incorporate a initialization pin
-[] _for the rising slope (or both):    + moving right would be using Rise, add -180 everytime reset
                                        + moving left don't add anything, just mark that reset adding to phase offset


NOTES:
    -PHASE MAX: 1.8V    MIN: 0.03V  [use as initial voltage check mark]
    -Before sending it to change the voltage to the phase, check if it wrapped by checking max or min
    -check if the phase has not hit the lowest if so check the magnitude if it has come back
    -pins that together:
        FOR CURRENT BOARD:
        Out -> In
        20  -> 18
        15  -> 14
        11  -> 10
    - to check for the max and min dev use the mag_mes array. use another index after to check
    - IF PHASE OFFSET CALCULATION TAKES TOO LONG JUST DO ONE ITERATION FOR 1 CASE THEN 2 LATER.
        - IF NEEDED FOR MORE PHASE OFFSET, THEN USE THE REPEAT TO ADVANTAGE
        - ONLINE IDE THAT SUCCESSFULLY RAN EVERYTHING
def func():
    x = 0
    global y
    while True:
        if x > 10:
            break
        x += 1
        marker = 1

    if marker == 1:
        print('hi')
        y = 1

y = 0

func()
print('done')
if y == 1:
    print('yes')

OUTPUT:
    hi
    done
    yes
___________________________________________________________________________
Flow for ALT_CODE
            REFER THE VOTLAGE AS INPUT B LEADS OR LAGS INPUT A
ISSUES:
    - Don't know if there is a lot of CONSTRUCTIVE/DECONSTRUCTIVE INTERFERENCE within Microwave Lab

VARIABLES:
    - cal_prog      : Calibration Flag. Allows us to place signal 12 o'clock and set the initial phase and
                        magnitude measurements
    - ph_cal        : Calibrated Phase Offset Measurement. Used to calculate the delta Phi used within the
                        Phase Array Calculation
    - ph_mes_up     : Used for INPUT B PHASE LAG overlap for delta phi calculation
    - ph_mes_down   : Used for INPUT B PHASE LEAD overlap for delta phi calculation
    - mag_cal       : Calibrated Magnitude Measurement. This will be used to determine if the signal is left/right
    - mag_mes       : Measured Magnitude after Calibration to find direction Left/Right
    - upper_mag     : Magnitude Pre-Measurement for 15 deg offset on Output for AD8302
    - lower_mag     : Magnitude Pre-Measurement for 165 deg offset on Output for AD8302
    - mag_array     : "36" element array used to calculate average for 'upper_mag' & 'lower_mag'
    - confirm       : Flag used for user to confirm that the user signal is placed at 'upper_mag' & 'lower_mag'
                        region for Pre-Measurement Calibration Protocol.
    - index         : Used to determine which region of overlap we are currently in


NEED TO DO:
    -[] Test with the oscilloscope or DMM if the voltage stays constant at 1.6 - 1.7 and 0.2 - 0.1V
        (Voltage markings: 15 degree -> 0.15V [UPPER]  165 Degree -> 1.65V [LOWER])

INTERRUPTS:
    -[] "cal_interrupt"     : Set (cal_prog == 1) to pass through calibration stage
    -[] "confirm_func"      : Set (confirm == 1) pass through magnitude capture

FUNCTION:
    -[] "average_calc"      : gather the magnitude array at threshold voltages and take average

MAIN_CODE:
    -[] "Calibration"       : Capture Analog value for the MAGNITUDE and PHASE when signal
                                is placed in front (relative to flight path)
        ""

! Changed the function for more the voltage increases the more phase shift.